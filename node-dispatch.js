// Dispatch server for node.js | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Motivation.
// Running multiple Node apps on a single server requires them to use different ports. This application routes HTTP requests to those different ports based on their URLs; for example, suppose you
// have this routing table (called 'routes' in this case):

// | foo on localhost:8081
//   bar on localhost:8082

// Any requests of the form "http://server/foo/..." will be routed as "http://server:8081/...", and requests to "http://server/bar/..." will go to "http://server:8082/...". You can update this
// routing table at runtime and it will be reread without restarting the proxy server. (Thanks to http://catonmat.net for the watchFile tip!) You run the server as 'node node-dispatch.js routes'
// in this case.

//   Reading the routes file.
//   This is fairly simple. The routing file supports line-comments starting with # in addition to rule definitions. Rule defs look like this:

//   | app on port n               # to route to a port on localhost
//     app on host:port            # to route to a port on any host

//   Nothing bad happens if you have a line that doesn't make sense; the server just prints a warning message.

    var routing_table      = {},
        read_routing_table = function (contents) {var lines = (contents || '').replace(/#.*(\n|$)/g, '$1').split(/\n\s*/);
                                                  routing_table = {};
                                                  console.log('Reading routing table');
                                                  for (var i = 0, l = lines.length, parts; i < l; ++i)
                                                    (parts = /^\s*(\w+) on port (\d+)\s*$/.exec(lines[i])) ?  (routing_table[parts[1]] = 'localhost:' + parts[2]) :
                                                    (parts = /^\s*(\w+) on (\w+:\d+)\s*$/ .exec(lines[i])) ?  (routing_table[parts[1]] = parts[2]) :
                                                                                    /^\s*$/.test(lines[i]) || console.log('Bogus line in routing table: ' + lines[i])};
    read_routing_table(require('fs').readFileSync(process.argv[2], 'ascii'));

//   Routing requests.
//   This requires a server that receives requests paired with a client that sends proxy requests. There is some minor URL rewriting, but nothing too bad. Each app definition in the routing table
//   is read as the root folder of the URL.

    process.on('uncaughtException', function (e) {console.log(e)});
    require('http').createServer(function (req, res) {
      var parts = /\/(\w+)(\/.*)/.exec(req.url);
      parts ? routing_table[parts[1]] ?
        (request = require('http').createClient(Number(routing_table[parts[1]].split(/:/)[1]), routing_table[parts[1]].split(/:/)[0]).
                                        request(req.method, parts[2], req.headers),
         request.on('response', function (response) {response.setEncoding('binary');
                                                     res.writeHead(response.statusCode, response.headers);
                                                     response.on('data', function (data) {res.write(data)});
                                                     response.on('end',  function     () {res.end()})}),
         req.on('data', function (data) {request.write(data, 'binary')}),
         req.on('end',  function     () {request.end()})) : (res.writeHead(500), res.end('Application not found: ' + parts[1])) :
                                                            (res.writeHead(500), res.end('Invalid URL: ' + req.url))}).listen(8080, '0.0.0.0');

// Generated by SDoc 
